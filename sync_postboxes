#!/usr/bin/perl
use Modern::Perl;
use File::Slurp;
use List::Util qw(min max);
use lib '.';
use OSM;

my $postboxes_data_file = 'postboxes.tsv';
if (not -e $postboxes_data_file) {
    my $uri = 'http://www.dracos.co.uk/play/locating-postboxes/export.php';
    die "$postboxes_data_file not there, fetch it from:\n$uri\n";
}

die "usage: $0 postcode-prefix\ne.g. $0 E10\n" if @ARGV != 1;
my $postcode_prefix = shift;
$postcode_prefix =~ /\A[A-Z]+[0-9]+\z/
    or die "bad postcode prefix $postcode_prefix\n";

my @got;
foreach (read_file $postboxes_data_file) {
    my ($ref, $postcode, $loc1, $loc2, $lat, $lon) = split /\t/;
    next unless $ref =~ /\A$postcode_prefix\s/o;
    die unless $postcode =~ /\A$postcode_prefix\s/o;
    push @got, [ $ref, $postcode, $lat, $lon, $loc1, $loc2 ];
    say "adding pobox at $lat $lon";
}
my @lats = map { $_->[2] } @got;
my @lons = map { $_->[3] } @got;
my $min_lat = min @lats;
my $max_lat = max @lats;
my $min_lon = min @lons;
my $max_lon = max @lons;
say "unpadded bbox: $min_lon $min_lat $max_lon $max_lat";

my $centre_lat = ($min_lat + $max_lat) / 2;
my $centre_lon = ($min_lon + $max_lon) / 2;

my $padding = 100;
my $padding_lat = OSM::height_to_lat_degrees $centre_lat, $centre_lon, $padding;
my $padding_lon = OSM::width_to_lon_degrees $centre_lat, $centre_lon, $padding;

$min_lat -= $padding_lat;
$max_lat += $padding_lat;
$min_lon -= $padding_lon;
$max_lon += $padding_lon;
say "padded bbox: $min_lon $min_lat $max_lon $max_lat";

say 'fetching';
my $data = OSM::get_area_bbox $min_lon, $min_lat, $max_lon, $max_lat;

say 'parsing';
my @nodes = OSM::parse_nodes $data;
my @postboxes
    = grep { exists $_->{amenity} and $_->{amenity} eq 'post_box' } @nodes;
use Data::Dump qw(dump);
say dump @postboxes;


